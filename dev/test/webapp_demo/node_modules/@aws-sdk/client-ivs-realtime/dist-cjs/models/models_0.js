"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateStageResponseFilterSensitiveLog = exports.CreateParticipantTokenResponseFilterSensitiveLog = exports.ParticipantTokenFilterSensitiveLog = exports.EventName = exports.EventErrorCode = exports.ParticipantState = exports.CompositionState = exports.DestinationState = exports.RecordingConfigurationFormat = exports.ParticipantTokenCapability = exports.ValidationException = exports.ServiceQuotaExceededException = exports.ResourceNotFoundException = exports.PendingVerification = exports.InternalServerException = exports.ConflictException = exports.AccessDeniedException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const IVSRealTimeServiceException_1 = require("./IVSRealTimeServiceException");
class AccessDeniedException extends IVSRealTimeServiceException_1.IVSRealTimeServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
exports.AccessDeniedException = AccessDeniedException;
class ConflictException extends IVSRealTimeServiceException_1.IVSRealTimeServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
exports.ConflictException = ConflictException;
class InternalServerException extends IVSRealTimeServiceException_1.IVSRealTimeServiceException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
exports.InternalServerException = InternalServerException;
class PendingVerification extends IVSRealTimeServiceException_1.IVSRealTimeServiceException {
    constructor(opts) {
        super({
            name: "PendingVerification",
            $fault: "client",
            ...opts,
        });
        this.name = "PendingVerification";
        this.$fault = "client";
        Object.setPrototypeOf(this, PendingVerification.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
exports.PendingVerification = PendingVerification;
class ResourceNotFoundException extends IVSRealTimeServiceException_1.IVSRealTimeServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class ServiceQuotaExceededException extends IVSRealTimeServiceException_1.IVSRealTimeServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
class ValidationException extends IVSRealTimeServiceException_1.IVSRealTimeServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.exceptionMessage = opts.exceptionMessage;
    }
}
exports.ValidationException = ValidationException;
exports.ParticipantTokenCapability = {
    PUBLISH: "PUBLISH",
    SUBSCRIBE: "SUBSCRIBE",
};
exports.RecordingConfigurationFormat = {
    HLS: "HLS",
};
exports.DestinationState = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    RECONNECTING: "RECONNECTING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
exports.CompositionState = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
exports.ParticipantState = {
    CONNECTED: "CONNECTED",
    DISCONNECTED: "DISCONNECTED",
};
exports.EventErrorCode = {
    INSUFFICIENT_CAPABILITIES: "INSUFFICIENT_CAPABILITIES",
    PUBLISHER_NOT_FOUND: "PUBLISHER_NOT_FOUND",
    QUOTA_EXCEEDED: "QUOTA_EXCEEDED",
};
exports.EventName = {
    JOINED: "JOINED",
    JOIN_ERROR: "JOIN_ERROR",
    LEFT: "LEFT",
    PUBLISH_ERROR: "PUBLISH_ERROR",
    PUBLISH_STARTED: "PUBLISH_STARTED",
    PUBLISH_STOPPED: "PUBLISH_STOPPED",
    SUBSCRIBE_ERROR: "SUBSCRIBE_ERROR",
    SUBSCRIBE_STARTED: "SUBSCRIBE_STARTED",
    SUBSCRIBE_STOPPED: "SUBSCRIBE_STOPPED",
};
const ParticipantTokenFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.token && { token: smithy_client_1.SENSITIVE_STRING }),
});
exports.ParticipantTokenFilterSensitiveLog = ParticipantTokenFilterSensitiveLog;
const CreateParticipantTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.participantToken && { participantToken: (0, exports.ParticipantTokenFilterSensitiveLog)(obj.participantToken) }),
});
exports.CreateParticipantTokenResponseFilterSensitiveLog = CreateParticipantTokenResponseFilterSensitiveLog;
const CreateStageResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.participantTokens && {
        participantTokens: obj.participantTokens.map((item) => (0, exports.ParticipantTokenFilterSensitiveLog)(item)),
    }),
});
exports.CreateStageResponseFilterSensitiveLog = CreateStageResponseFilterSensitiveLog;
